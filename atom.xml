<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daniel Fone]]></title>
  <link href="http://daniel.fone.net.nz/atom.xml" rel="self"/>
  <link href="http://daniel.fone.net.nz/"/>
  <updated>2014-01-31T12:36:48+13:00</updated>
  <id>http://daniel.fone.net.nz/</id>
  <author>
    <name><![CDATA[Daniel Fone]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laziest possible solutions for Stripe's CTF]]></title>
    <link href="http://daniel.fone.net.nz/blog/2014/01/31/laziest-possible-solutions-for-stripes-ctf/"/>
    <updated>2014-01-31T12:24:00+13:00</updated>
    <id>http://daniel.fone.net.nz/blog/2014/01/31/laziest-possible-solutions-for-stripes-ctf</id>
    <content type="html"><![CDATA[<p>A good programmer is a lazy programmer right? Here&rsquo;s my solutions to Stripe&rsquo;s latest CTF.
I&rsquo;m almost embarrassed how stupid some of them are, but at the end of the day, results matter.</p>

<h2>Level 0</h2>

<p><a href="https://github.com/danielfone/stripe-ctf-level0/commit/fef0cfcba371dc29d9f0fd1f7bc0e1c9e1161b38#diff-1">Converted</a> <code>array</code> to <code>set</code> for fast lookups.</p>

<p><a href="https://github.com/danielfone/stripe-ctf-level0">https://github.com/danielfone/stripe-ctf-level0</a></p>

<h2>Level 1</h2>

<p>Simply move the while loop into a single ruby process and use Digest::SHA1. Slow, but fast enough to beat the level.
This is the only level I had to write proper code for.</p>

<p><a href="https://github.com/danielfone/stripe-ctf-level1">https://github.com/danielfone/stripe-ctf-level1</a></p>

<h2>Level 2</h2>

<p>Exploit the fact that the test uses a fixed number of requests (and many more for &ldquo;elephants&rdquo; than &ldquo;mice&rdquo;), and <a href="https://github.com/danielfone/stripe-ctf-level2/commit/7f1171a8400c39ac691c54fa0cddbc9ea4202edb#diff-1">limit each IP to 10 requests</a>.</p>

<p><a href="https://github.com/danielfone/stripe-ctf-level2">https://github.com/danielfone/stripe-ctf-level2</a></p>

<h2>Level 3</h2>

<p>Friends don&rsquo;t let friends use scala.</p>

<ul>
<li>Set up a basic sinatra server to implement the API</li>
<li><a href="https://github.com/danielfone/stripe-ctf-level3/blob/master/search.rb#L24">Shell out to grep</a> to do actual searching. Single node, no index. O_o</li>
</ul>


<p><a href="https://github.com/danielfone/stripe-ctf-level3">https://github.com/danielfone/stripe-ctf-level3</a></p>

<h2>Level 4</h2>

<p>I was fortunate enough to reach this level early, and pass it before Stripe improved octopus. As such I passed it with <a href="https://github.com/danielfone/stripe-ctf-level4/commit/10be54c6915d1492791bb147a0c9daeb3c27003d">my first attempt</a>, simply by removing the failover (node0 becomes Single Point of Failure) and forwarding requests from the secondaries to the primary.</p>

<p>The remaining commits are my futile attempts to pass this level after the SPOF check was added to the tests. Looking at the code for successful solutions, I can see I was on the right path but needed to invest more time into making my command forwarding more robust.</p>

<p><a href="https://github.com/danielfone/stripe-ctf-level4">https://github.com/danielfone/stripe-ctf-level4</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Prototyping Web Applications in Rails 4]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/10/19/prototyping-web-applications-in-rails-4/"/>
    <updated>2013-10-19T14:29:00+13:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/10/19/prototyping-web-applications-in-rails-4</id>
    <content type="html"><![CDATA[<p><em>From a presentation I gave at the at the <a href="https://twitter.com/chchruby">@chchruby</a> meetup on Thursday, 17th Oct, 2013.
It was aimed at folks who were unfamiliar with Rails and bear in mind, this was a <strong>15 minute</strong> lightning talk.
I&rsquo;ve linked to specific commits below, but you can view the finished repo on <a href="https://github.com/danielfone/reimburser-wizard">GitHub</a>.</em></p>

<h2>Background</h2>

<p>Tonight I want share a development style that Rails is very good at,
but one that doesn&rsquo;t get a lot of love in the community.</p>

<p>When I first discovered Ruby on Rails in my days of writing spaghetti PHP,
I was amazed with how fast you could write basic web applications.
However, as we become better developers and learn how to do things <em>properly</em>,
we spend more and more time thinking about testing and decoupling and encapsulation and what to name our variables.
In other words: no matter how good your tools are, doing things <em>well</em> is hard and takes time.</p>

<p>So tonight I want to go back to the good old days of not knowing any better,
and show you how little effort it takes to throw together a prototype web application using generators and scaffolds and lots of bad hacks.</p>

<p>And although I&rsquo;d never want to see this kind of code in a production application,
I&rsquo;m increasingly using this technique professionally
to develop very fast, cost-effective prototypes for demonstration purposes.
After all, it&rsquo;s much easier discussing the merit of an idea when everyone&rsquo;s looking at it on the screen,
rather than everyone imagining something slightly different in their head.</p>

<h2>The Idea</h2>

<p>We&rsquo;re going to prototype a simple reimbursement system.
We want to manage expense claims which consist of:</p>

<ul>
<li>A simple reference</li>
<li>A &ldquo;payee&rdquo; to reimburse — usually an employee</li>
<li>A series of lines detailing the expenses, amount, expense codes etc</li>
<li>Any comments</li>
</ul>


<h2>The Application Skeleton</h2>

<pre><code>$ rails new reimburser-wizard -T -m ~/Development/rails-templates/default-prototype.rb
$ cd reimburser-wizard
</code></pre>

<p>The <code>rails new</code> command is pretty self-explanatory. It creates a new Rails application in a directory of the same name.
The only two options I&rsquo;m specifying are:</p>

<pre><code>-T, [--skip-test-unit]         # Skip Test::Unit files
-m, [--template=TEMPLATE]      # Path to some application template (can be a filesystem path or URL)
</code></pre>

<p>You can check out my <a href="https://github.com/danielfone/rails-templates/blob/master/default-prototype.rb">prototyping template on Github</a>,
but here&rsquo;s the basic rundown:</p>

<ul>
<li>Disable test generators</li>
<li>Disable strong parameter protection</li>
<li>Include the <a href="https://github.com/seyhunak/twitter-bootstrap-rails">twittter-bootstrap-rails gem</a> and run the generators</li>
<li>Remove production and test configuration</li>
<li>Add a partial for rendering error messages</li>
</ul>


<p>Next we&rsquo;ll copy in a simple layout (<a href="https://github.com/danielfone/reimburser-wizard/blob/fd4055e12704b800b7246d637209b5ea5e44005a/app/views/layouts/application.html.erb">app/views/layouts/application.html.erb</a>)
and some bootstrap overrides (<a href="https://github.com/danielfone/reimburser-wizard/blob/fd4055e12704b800b7246d637209b5ea5e44005a/app/assets/stylesheets/bootstrap_and_overrides.css">app/assets/stylesheets/bootstrap_and_overrides.css</a>).</p>

<h2>The Scaffolding</h2>

<p>Here&rsquo;s where we really start building our prototype. Most of the work is done by Rails&#8217; scaffold generators.
In this simple prototype, we&rsquo;ll model our domain with just two resources, a Reimbursement and an Employee.</p>

<pre><code>$ rails generate scaffold Reimbursement reference:string payee:references comments:text data:text
$ rails generate scaffold Employee name:string
$ rake db:migrate
</code></pre>

<p>Our Reimbursement model is very simple: we&rsquo;ve got three regular attributes (<code>reference</code>, <code>payee</code> and <code>comments</code>),
and a <code>data</code> field we&rsquo;ll use as a  meta-attribute for serializing whatever other attributes we need later.
For the purposes of the demo, our Employee simply has a <code>name</code> attribute.
The <code>db:migrate</code> rake task applies the <a href="https://github.com/danielfone/reimburser-wizard/tree/2c3fe4770203d66e25c41482deb78c19491062c8/db/migrate">generated migrations</a> to the sqlite database.
As you can see in the <a href="https://github.com/danielfone/reimburser-wizard/commit/2c3fe4770203d66e25c41482deb78c19491062c8">commit</a>, the scaffold generators create a lot of code for us.</p>

<p>Now we&rsquo;ll run some bootstrap helpers to replace the default rails views with <a href="https://github.com/danielfone/reimburser-wizard/commit/f4cd02940a06b1cf1972a71a557f11612b61db39">bootstrap themed views</a>.</p>

<pre><code>$ rm app/assets/stylesheets/scaffolds.css.scss
$ rails generate bootstrap:themed Reimbursements
$ rails generate bootstrap:themed Employees
</code></pre>

<p>That&rsquo;s it for our scaffolding! The basic foundation of the prototype is in place.</p>

<h2>Demo</h2>

<p>Now&rsquo;s an excellent time to play with the application. Let&rsquo;s start the web server:</p>

<pre><code>$ rails server
</code></pre>

<p>Because we haven&rsquo;t set up our <a href="http://api.rubyonrails.org/v4.0.0/classes/ActionDispatch/Routing/Mapper/Base.html#method-i-root">root route</a>,
you&rsquo;ll need to navigate to <a href="http://localhost:3000/reimbursements">http://localhost:3000/reimbursements</a> .</p>

<p>We&rsquo;ve barely written any code but we&rsquo;ve got a fully functional web application.
Admittedly it&rsquo;s not very useful yet, but it&rsquo;s a powerful base to add functionality on to our prototype.
Be sure to create a few <code>Employees</code> for our next step.</p>

<h2>Making It Work</h2>

<p>From this point, we&rsquo;ll write code rather than use generators. I&rsquo;ll link to diffs on GitHub.
If you&rsquo;re new to Ruby on Rails, check out any unfamiliar methods in the <a href="http://api.rubyonrails.org/v4.0.0/">Ruby on Rails API docs</a>.</p>

<h3><a href="https://github.com/danielfone/reimburser-wizard/commit/5a512719d522f4cf063632dfd1b6a18875db67aa">Change payee field to a select box</a></h3>

<p>Naturally, we want our users to be able to select employees to reimburse.
We&rsquo;ll use Rails&#8217; <a href="http://api.rubyonrails.org/v4.0.0/classes/ActionView/Helpers/FormOptionsHelper.html#method-i-collection_select">collection_select</a> helper for this.
Check out the comments on the commit for more info.</p>

<h3><a href="https://github.com/danielfone/reimburser-wizard/commit/f82821e4737a76964ba0b507f6596b381e60a77a">Change comment field to be multiline</a></h3>

<p>A simple switch from a text_field to a text_area.
<strong>Confession</strong>: after 5 years of professional Rails development,
I didn&rsquo;t know about <a href="http://api.rubyonrails.org/v4.0.0/classes/ActionView/Helpers/TextHelper.html#method-i-simple_format">simple_format</a> until I was preparing this talk.</p>

<h3><a href="https://github.com/danielfone/reimburser-wizard/commit/5e52fbc16f4e8609948ae214f47d82a1c6767cfd">Add LineItem table to Reimbursement view</a></h3>

<p>The line items are the most complex part of this simple app.
We&rsquo;ll start by adding a table on the Reimbursement view to present the line items.
Since they don&rsquo;t exist yet, we&rsquo;ll &ldquo;stub&rdquo; the method on the Reimbursement model to return an empty array.</p>

<h3><a href="https://github.com/danielfone/reimburser-wizard/commit/257d3f26b95881d384300fc18f6e9645a24d8432">Add LineItem fields to Reimbursement form</a></h3>

<p>To create the line item fields on the reimbursement form, we&rsquo;ll use the magic of <code>fields_for</code>.
This is a tremendously flexible helper, to the point that I&rsquo;ve never quite understood how it works
despite using it in almost every application I write.</p>

<p>We&rsquo;ll also setup our LineItem model, with a few attributes and some validations.</p>

<h3><a href="https://github.com/danielfone/reimburser-wizard/commit/1ed5f8176087a1ca72917531792fc744f10f14bb">Allow LineItems to be persisted</a></h3>

<p>Finally, we&rsquo;ll inform our Reimbursement model how to persist the line items.
We&rsquo;re going to serialise the attributes as JSON in our data meta-attibute.
We need to do a <a href="https://github.com/danielfone/reimburser-wizard/commit/1ed5f8176087a1ca72917531792fc744f10f14bb#diff-8153fe000751175f2ebf75b5659aa017R17">simple transformation</a> on the form data,
but the rest is fairly straight forward.</p>

<h2>Finished!</h2>

<p>In just 15 minutes, we&rsquo;ve built a very simple prototype that contains some non-trivial functionality.</p>

<p><img src="http://daniel.fone.net.nz/images/2013-10-19-prototyping-web-applications-in-rails-4/form.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why You Should Never Rescue Exception in Ruby]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/28/why-you-should-never-rescue-exception-in-ruby/"/>
    <updated>2013-05-28T04:27:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/28/why-you-should-never-rescue-exception-in-ruby</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong> <strong><code>rescue Exception =&gt; e</code> will turn your code into a brain eating zombie.</strong></p>

<p>The equivalent of <code>rescue</code> with an argument is <code>rescue =&gt; e</code> or <code>rescue StandardError =&gt; e</code>. Use these, or better still, figure out exactly what you&rsquo;re trying to rescue and use <code>rescue OneError, AnotherError =&gt; e</code></p>

<h2>What&rsquo;s the deal?</h2>

<p>A common pattern for rescuing exceptions in Ruby is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">do_some_job!</span>
</span><span class='line'>  <span class="c1"># ... do something ...</span>
</span><span class='line'>  <span class="n">job_succeeded</span>
</span><span class='line'><span class="k">rescue</span>
</span><span class='line'>  <span class="n">job_failed</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is <em>okay</em>, but when developers need to know the exception details, a horrible, <em>nasty</em>, <strong>brain-devouring</strong> pattern tends to emerge:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">do_some_job!</span>
</span><span class='line'>  <span class="c1"># ... do something ...</span>
</span><span class='line'>  <span class="n">job_succeeded</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="n">job_failed</span> <span class="n">e</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I have been caught out by that code on at least three separate occasions. Twice when I wrote it. I write this post in the hope that I (and perhaps others) will finally wise up about exception handling and that my fingers will never, ever type that code again.</p>

<p><em>(Just to confirm this is a actually bad practice, here&rsquo;s <a href="https://github.com/search?l=ruby&amp;o=asc&amp;p=1&amp;q=%22rescue+Exception+=%3E+%22&amp;ref=searchresults&amp;type=Code">~200k results</a> for <code>rescue Exception =&gt;</code> on Github)</em></p>

<h2>What is this I don&rsquo;t even…</h2>

<p><code>Exception</code> is the root of the exception class hierarchy in Ruby. Everything from signal handling to memory errors will raise a subclass of Exception. Here&rsquo;s the full list of exceptions from ruby-core that we&rsquo;ll inadvertently rescue when rescuing Exception.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SystemStackError</span>
</span><span class='line'><span class="no">NoMemoryError</span>
</span><span class='line'><span class="no">SecurityError</span>
</span><span class='line'><span class="no">ScriptError</span>
</span><span class='line'>  <span class="no">NotImplementedError</span>
</span><span class='line'>  <span class="no">LoadError</span>
</span><span class='line'>    <span class="ss">Gem</span><span class="p">:</span><span class="ss">:LoadError</span>
</span><span class='line'>  <span class="no">SyntaxError</span>
</span><span class='line'><span class="no">SignalException</span>
</span><span class='line'>  <span class="no">Interrupt</span>
</span><span class='line'><span class="no">SystemExit</span>
</span><span class='line'>  <span class="ss">Gem</span><span class="p">:</span><span class="ss">:SystemExitException</span>
</span></code></pre></td></tr></table></div></figure>


<p>Do you really want to rescue a <code>NoMemoryError</code> and send an email saying the job failed?!? Good luck with that.</p>

<h2>Better: Rescue StandardError</h2>

<p><code>rescue =&gt; e</code> is shorthand for <code>rescue StandardError =&gt; e</code> and is almost certainly the broadest type of Exception that we want to rescue. In almost every circumstance, we can replace <code>rescue Exception =&gt; e</code> with <code>rescue =&gt; e</code> and be better off for it. The only time when that&rsquo;s <em>not</em> a good idea is for code that&rsquo;s doing some kind of exception logging/reporting/management. In those rare cases, it&rsquo;s possible we&rsquo;ll want to rescue non-StandardErrors — but we still need to think pretty hard about what happens after we&rsquo;ve rescued them.</p>

<p>Most of the time though, we don&rsquo;t even want to rescue StandardError!</p>

<h2>More Self-Inflicted Fail</h2>

<p>Imagine a scenario where we&rsquo;re connecting to a 3rd-party API in our application. For example, we want our users to upload their cat photos to twitfaceagram. We definitely want to handle the scenarios where the connection times out, or the DNS fails to resolve, or the API returns bogus data. In these circumstances, we want to present a friendly message to the user that the application couldn&rsquo;t connect to the remote server.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">upload_to_twitfaceagram</span>
</span><span class='line'>  <span class="c1"># ... do something ...</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>  <span class="n">flash</span><span class="o">[</span><span class="ss">:error</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;The internet broke&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of the time, this code will do what we expect. Something out of our control will go wrong, and it&rsquo;s appropriate to present the user with a friendly message. However, there&rsquo;s a major gotcha with this code: we&rsquo;re still rescuing many exceptions we&rsquo;re not aware of.</p>

<p>Here&rsquo;s an abridged list of StandardErrors defined in ruby-core 2.0.0 (1.9 is not materially different):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">StandardError</span>
</span><span class='line'>  <span class="no">FiberError</span>
</span><span class='line'>  <span class="no">ThreadError</span>
</span><span class='line'>  <span class="no">IndexError</span>
</span><span class='line'>    <span class="no">StopIteration</span>
</span><span class='line'>    <span class="no">KeyError</span>
</span><span class='line'>  <span class="ss">Math</span><span class="p">:</span><span class="ss">:DomainError</span>
</span><span class='line'>  <span class="no">LocalJumpError</span>
</span><span class='line'>  <span class="no">IOError</span>
</span><span class='line'>    <span class="no">EOFError</span>
</span><span class='line'>  <span class="no">EncodingError</span>
</span><span class='line'>    <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:ConverterNotFoundError</span>
</span><span class='line'>    <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:InvalidByteSequenceError</span>
</span><span class='line'>    <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:UndefinedConversionError</span>
</span><span class='line'>    <span class="ss">Encoding</span><span class="p">:</span><span class="ss">:CompatibilityError</span>
</span><span class='line'>  <span class="no">RegexpError</span>
</span><span class='line'>  <span class="no">SystemCallError</span>
</span><span class='line'>    <span class="ss">Errno</span><span class="p">:</span><span class="ss">:ERPCMISMATCH</span>
</span><span class='line'>    <span class="c1"># ... lots of system call errors ...</span>
</span><span class='line'>    <span class="ss">Errno</span><span class="p">:</span><span class="ss">:NOERROR</span> <span class="c1"># errrr.... what?</span>
</span><span class='line'>  <span class="no">RangeError</span>
</span><span class='line'>    <span class="no">FloatDomainError</span>
</span><span class='line'>  <span class="no">ZeroDivisionError</span>
</span><span class='line'>  <span class="no">RuntimeError</span>
</span><span class='line'>    <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Exception</span>
</span><span class='line'>      <span class="c1"># ... lots of gem errors ...</span>
</span><span class='line'>  <span class="no">NameError</span>
</span><span class='line'>    <span class="no">NoMethodError</span>
</span><span class='line'>  <span class="no">ArgumentError</span>
</span><span class='line'>    <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Requirement</span><span class="o">::</span><span class="no">BadRequirementError</span>
</span><span class='line'>  <span class="no">TypeError</span>
</span></code></pre></td></tr></table></div></figure>


<p>In a fresh Rails 3.2.13 application, there are <strong><a href="https://gist.github.com/danielfone/5654600">375 StandardErrors defined</a></strong>.</p>

<p>Now let&rsquo;s say we&rsquo;re refactoring the API integration and we make a typo with a method name. What&rsquo;s going to happen?</p>

<p>If we&rsquo;ve wrapped the entire process in a <code>rescue =&gt; e</code> (which is rescuing StandardError) the NoMethodError is going to be swallowed and our graceful error handling code is going to be run instead. When we run our well written tests, they&rsquo;ll fail. But rather than raising a straight-forward NoMethodError, it&rsquo;ll look like there was an gracefully handled connectivity problem.</p>

<p>Now <em>that</em> is going to take some debugging.</p>

<p>If our tests are poorly written there&rsquo;ll be no exception and perhaps the tests will just pass. Granted, in production our users won&rsquo;t be seeing ugly 500 errors, but they sure won&rsquo;t be uploading their cat photos either.</p>

<h2>Best: Rescue Specific Exceptions</h2>

<p>Every part of our code is <em>qualified</em> to rescue from certain exceptional circumstances. If we want to catch connectivity problems in an API integration, our code will be qualified to rescue from a <a href="http://tammersaleh.com/posts/rescuing-net-http-exceptions">long list</a> of Net related exceptions. It is <em>not</em> qualified to rescue from an ArgumentError, which is a code-time problem and not a run-time problem!</p>

<p>Every time we write a rescue, we need to think hard about what exceptions this code is actually qualified to handle.</p>

<p>In the case of HTTP, we can make it easier on ourselves and use a wrapper like <a href="https://github.com/lostisland/faraday">faraday</a>. In this case we&rsquo;ll have a <a href="https://github.com/lostisland/faraday/blob/master/lib/faraday/error.rb">much shorter list</a> of possible exceptions to rescue.</p>

<h2>So…</h2>

<p>… if you encounter <code>rescue Exception =&gt; e</code> in an existing codebase, you can almost certainly replace it with <code>rescue =&gt; e</code>.</p>

<p>… if you find yourself about to type <code>rescue Exception =&gt; e</code>, slap yourself in the face, figure out exactly what exceptions you&rsquo;re dealing with and rescue those instead.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a Class Hierarchy in Ruby]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/27/generating-a-class-hierarchy-in-ruby/"/>
    <updated>2013-05-27T12:59:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/27/generating-a-class-hierarchy-in-ruby</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a way to see what classes descend from a particular superclass in Ruby. You can use it to list all ActiveRecord models defined in your application, every implementation on a particular base class, or whatever else might be of interest.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; puts ClassHierarchy.new ActionController::Base
</span><span class='line'>ActionController::Base
</span><span class='line'>  ApplicationController
</span><span class='line'>    UsersController
</span><span class='line'>    UserSessionsController
</span><span class='line'>    OrdersController
</span><span class='line'>    ...</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;re using Rails, bear in mind that most of your classes won&rsquo;t be loaded by default in the development environment. You can get around this by manually requiring the files you&rsquo;re interested in:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Dir.glob File.join(Rails.root, 'app/models/**/*.rb'), &method(:require)</span></code></pre></td></tr></table></div></figure>


<p>To use in your code, simply put <code>class_hierarchy.rb</code> somewhere that makes sense (perhaps /lib) and <code>require 'class_hierarchy'</code>.</p>

<div><script src='https://gist.github.com/5654633.js?file=class_hierarchy.rb'></script>
<noscript><pre><code>class ClassHierarchy

  def initialize(root_class)
    @root_class = root_class
    @parent_class = @root_class.superclass
    @tree = {}
    generate_tree
  end

  def to_s
    @tree.collect { |class_name, subclasses| branch_to_s class_name, subclasses }.join
  end

private

  def generate_tree
    subclasses.each { |subclass| subclass.insert_into_tree @tree, @parent_class }
  end

  def subclasses
    @subclasses ||= all_classes.select { |klass| klass &lt; @root_class }.collect { |klass| ClassHierarchy::Subclass.new klass }
  end

  def all_classes
    @all_classes ||= ObjectSpace.each_object(::Class)
  end

  def branch_to_s(class_name, subclasses, indent=0)
    string = (&quot; &quot; * indent)
    string &lt;&lt; class_name
    string &lt;&lt; &quot;\n&quot;
    string &lt;&lt; subclasses.collect { |subclass_name, subsubclasses| branch_to_s subclass_name, subsubclasses, indent + 2 }.join
  end

  class Subclass &lt; Struct.new(:subclass)

    def superclasses
      @superclasses ||= subclass.ancestors - subclass.included_modules
    end

    def insert_into_tree(tree, root_class)
      classes = superclasses.take_while { |klass| klass != root_class }
      classes.reverse.collect(&amp;:name).compact.inject(tree) { |memo,name| memo[name] ||= {} }
    end

  end

end
</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Meeting Inspiration Halfway]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/27/meeting-inspiration-halfway/"/>
    <updated>2013-05-27T12:43:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/27/meeting-inspiration-halfway</id>
    <content type="html"><![CDATA[<blockquote><p>[Inspiration] does not always respond to the first invitation. We must always work, and a self-respecting artist must not fold his hands on the pretext that he is not in the mood. If we wait for the mood, without endeavouring to meet it half-way, we easily become indolent and apathetic. We must be patient, and believe that inspiration will come to those who can master their disinclination.</p><footer><strong>Pyotr Ilyich Tchaikovsky</strong></footer></blockquote>


<p>Sometimes as a freelancer, it can be very hard to remain productive without work from clients. when I&rsquo;m busy engaged with clients, I have dozens of ideas about open source projects, business development, SaaS applications etc. But when I finally get a gap between engagements, it can be hard to turn those ideas into actionable points. I know I&rsquo;ve hit the bottom of the motivation stack when I&rsquo;m clicking through meme gifs on the frontpage of reddit.</p>

<p>As an engineer, I do my best work when I have a concrete problem in front of me that needs a solution in a hurry. Without that focussing effect, I find myself waiting for bursts of inspiration to fill my sails.</p>

<p>The antidote? <em>&ldquo;Believe that inspiration will come to those who can master their disinclination.&rdquo;</em></p>

<p>Or, to hear it another way…</p>

<blockquote><p>We just have to come in every morning and somehow, launch the editor.</p><footer><strong>Joel Spolsky,</strong> <cite><a href='http://www.joelonsoftware.com/articles/fog0000000339.html'>www.joelonsoftware.com/articles/&hellip;</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persist Invalid Records with ActiveRecord]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/24/persist-invalid-records-with-activerecord/"/>
    <updated>2013-05-24T12:38:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/24/persist-invalid-records-with-activerecord</id>
    <content type="html"><![CDATA[<p>Some time ago, I had an unusual design brief for a Rails app:</p>

<blockquote><p>Even if a user submits an invalid record, we need to
  (a) save a copy to the database, along with the validation errors, and
  (b) re-render the form with the error messages as per the default Rails behavior.</p></blockquote>

<p>The idea behind this design was that administrators could see the unsuccessful submissions and intervene to assist the users if necessary.</p>

<p>If anyone ever finds themselves in a similar situation, here&rsquo;s what I ended up doing:</p>

<p>I&rsquo;m going to use a model called Subscription by way of example. This same pattern will work on any ActiveRecord model.</p>

<h3>Add a <code>record_errors</code> text column</h3>

<p>We&rsquo;ll serialize the validation errors and store them in a field called <code>record_errors</code>.</p>

<figure class='code'><figcaption><span>/db/migrations/20130524012635_add_record_errors_to_subscriptions.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">AddRecordErrorsToSubscriptions</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">add_column</span> <span class="ss">:subscriptions</span><span class="p">,</span> <span class="ss">:record_errors</span><span class="p">,</span> <span class="ss">:text</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Add an ActiveRecord extension to handle persistence</h3>

<p>This module will catch validation failures and persist the record anyway. It&rsquo;s completely independent of the domain/business logic of the application so I like to store it in /lib. This is the main logic for achieving our required behaviour.</p>

<figure class='code'><figcaption><span>/lib/save_with_errors.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">SaveWithErrors</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save_with_errors!</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">save_without_errors!</span> <span class="o">*</span><span class="n">args</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span>
</span><span class='line'>    <span class="n">save_anyway</span>
</span><span class='line'>    <span class="k">raise</span> <span class="c1"># this re-raises the exception we just rescued</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save_with_errors</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="n">save_without_errors</span> <span class="o">*</span><span class="n">args</span> <span class="ow">or</span> <span class="n">save_anyway</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">receiver</span><span class="p">)</span>
</span><span class='line'>    <span class="n">receiver</span><span class="o">.</span><span class="n">serialize</span> <span class="ss">:record_errors</span><span class="p">,</span> <span class="no">Hash</span>
</span><span class='line'>    <span class="n">receiver</span><span class="o">.</span><span class="n">alias_method_chain</span> <span class="ss">:save</span><span class="p">,</span> <span class="ss">:errors</span>
</span><span class='line'>    <span class="n">receiver</span><span class="o">.</span><span class="n">alias_method_chain</span> <span class="ss">:save!</span><span class="p">,</span> <span class="ss">:errors</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">save_anyway</span>
</span><span class='line'>    <span class="nb">dup</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">record_errors</span> <span class="o">=</span> <span class="n">errors</span><span class="o">.</span><span class="n">messages</span> <span class="p">}</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="ss">validate</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Include our ActiveRecord extension on our model</h3>

<p>All we need to do is <code>include</code> the <code>SaveWithErrors</code> module into our ActiveRecord model. We could also require &lsquo;save_with_errors&rsquo; in <code>config/application.rb</code>.</p>

<figure class='code'><figcaption><span>/app/models/subscription.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;save_with_errors&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Subscription</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">SaveWithErrors</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attr_accessible</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:token</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validate</span> <span class="ss">:valid_token</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">valid_token</span>
</span><span class='line'>    <span class="c1"># something meaningful</span>
</span><span class='line'>    <span class="n">errors</span><span class="o">.</span><span class="n">add</span> <span class="ss">:token</span><span class="p">,</span> <span class="s1">&#39;is invalid&#39;</span> <span class="k">unless</span> <span class="n">token</span> <span class="o">==</span> <span class="s1">&#39;12345&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Result</h3>

<pre><code>Loading development environment (Rails 3.2.13)

&gt; Subscription.create! name: 'My Name', email: 'test@example.com'
  SQL (3.6ms)  INSERT INTO "subscriptions" ("created_at", "email", "name", "record_errors", "token", "updated_at") VALUES (?, ?, ?, ?, ?, ?)  [["created_at", Fri, 24 May 2013 01:55:07 UTC +00:00], ["email", "test@example.com"], ["name", "My Name"], ["record_errors", "--- !omap\n- :token:\n  - is invalid\n"], ["token", nil], ["updated_at", Fri, 24 May 2013 01:55:07 UTC +00:00]]

ActiveRecord::RecordInvalid: Validation failed: Token is invalid
  [... backtrace ...]
</code></pre>

<p>Notice that a record has been inserted, but the exception that we&rsquo;d expect from <code>create!</code> has still been raised. We can verify this by inspecting the last Subscription record:</p>

<pre><code>&gt; y Subscription.last
  Subscription Load (0.3ms)  SELECT "subscriptions".* FROM "subscriptions" ORDER BY "subscriptions"."id" DESC LIMIT 1
--- !ruby/object:Subscription
attributes:
  id: 19
  name: My Name
  email: test@example.com
  token: 
  created_at: 2013-05-24 01:55:07.747035000 Z
  updated_at: 2013-05-24 01:55:07.747035000 Z
  record_errors: !omap
  - :token:
    - is invalid
</code></pre>

<p>Exactly what we want!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoloading The Wrong Superclass with Rails]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/24/autoloading-the-wrong-superclass-with-rails-autoloading/"/>
    <updated>2013-05-24T10:14:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/24/autoloading-the-wrong-superclass-with-rails-autoloading</id>
    <content type="html"><![CDATA[<p>Autoloading in Ruby on Rails can cause all kinds of grief if you don&rsquo;t watch out. Here&rsquo;s a really quick tip to avoid hours of debugging down the track.</p>

<blockquote><p>Always use the full class namespace when specifying a superclass inside a module</p></blockquote>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">module</span> <span class="nn">MyEngine</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">WidgetController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>      <span class="c1"># BAD! ApplicationController is ambiguous</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">module</span> <span class="nn">MyEngine</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">WidgetController</span> <span class="o">&lt;</span> <span class="ss">MyEngine</span><span class="p">:</span><span class="ss">:ApplicationController</span>
</span><span class='line'>      <span class="c1"># Good - inherits from the module specific ApplicationController</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">module</span> <span class="nn">MyEngine</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">WidgetController</span> <span class="o">&lt;</span> <span class="o">::</span><span class="no">ApplicationController</span>
</span><span class='line'>      <span class="c1"># Good - inherits from the top-level ApplicationController</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the first example, the superclass for WidgetController <strong>will depend on which classes are already loaded</strong>. Ruby will look for the following classes in order:</p>

<ol>
<li> <code>MyEngine::ApplicationController</code></li>
<li> <code>::ApplicationController</code></li>
</ol>


<p>The trouble occurs when Rails has already autoloaded <code>::ApplicationController</code> and not <code>MyEngine::ApplicationController</code>. In this case, Rails will never need to autoload <code>MyEngine::ApplicationController</code> because <code>::ApplicationController</code> already matches the superclass.</p>

<p>Autoloading can occur in a different order between execution environments. For example, tests could all pass and while production system fails because of the different autoloading behavior.</p>

<p>The examples below demonstrate how the order of the class definitions affect which superclass is used if the superclass is ambiguous. When written out like this, the behavior is fairly obvious.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;This is the wrong super class!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Widget</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MyWidget</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>    <span class="c1"># Inherits from ::Base because Widget::Base isn&#39;t defined yet</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Widget</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Success!&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>&gt; Widget::MyWidget.new
RuntimeError: This is the wrong super class!
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;This is the wrong super class!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Widget</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Success!&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Widget</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">MyWidget</span> <span class="o">&lt;</span> <span class="no">Base</span>
</span><span class='line'>    <span class="c1"># Inherits from Widget::Base</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>&gt; Widget::MyWidget.new
Success!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A better way to manage the Rails secret token]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/20/a-better-way-to-manage-the-rails-secret-token/"/>
    <updated>2013-05-20T07:35:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/20/a-better-way-to-manage-the-rails-secret-token</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong> Don&rsquo;t hardcode secret tokens. Load them from the environment like this…</p>

<figure class='code'><figcaption><span>/config/initializers/secret_token.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Be sure to restart your server when you modify this file.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Your secret key for verifying the integrity of signed cookies.</span>
</span><span class='line'><span class="c1"># If you change this key, all old signed cookies will become invalid!</span>
</span><span class='line'><span class="c1"># Make sure the secret is at least 30 characters and all random,</span>
</span><span class='line'><span class="c1"># no regular words or you&#39;ll be exposed to dictionary attacks.</span>
</span><span class='line'><span class="ss">MyApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">secret_token</span> <span class="o">=</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span> <span class="ow">or</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">test?</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;x&#39;</span> <span class="o">*</span> <span class="mi">30</span><span class="p">)</span> <span class="c1"># meets minimum requirement of 30 chars long</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;SECRET_TOKEN&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>… and use the <a href="https://github.com/bkeepers/dotenv">Dotenv</a> gem in production if needed.</p>

<h2>Insecure defaults</h2>

<p>When you create a new Rails project, one of the files created will be <code>/config/initializers/secret_token.rb</code>. This file will look something like this:</p>

<figure class='code'><figcaption><span>/config/initializers/secret_token.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Be sure to restart your server when you modify this file.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Your secret key for verifying the integrity of signed cookies.</span>
</span><span class='line'><span class="c1"># If you change this key, all old signed cookies will become invalid!</span>
</span><span class='line'><span class="c1"># Make sure the secret is at least 30 characters and all random,</span>
</span><span class='line'><span class="c1"># no regular words or you&#39;ll be exposed to dictionary attacks.</span>
</span><span class='line'><span class="ss">MyApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">secret_token</span> <span class="o">=</span> <span class="s1">&#39;3eb6db5a9026c547c72708438d496d942e976b252138db7e4e0ee5edd7539457d3ed0fa02ee5e7179420ce5290462018591adaf5f42adcf855da04877827def2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This token is used to sign cookies that the application sets. Without this, it&rsquo;s impossible to trust cookies that the browser sends, and hence difficult to rely on session based authentication.</p>

<h2>Why this is bad</h2>

<p>Firstly, hard-coding configuration conflates config and code. Although this may not cause much pain in a very simple context, as the application and infrastructure grow this anti-pattern will make configuration increasingly complex and error prone.</p>

<blockquote><p>An app’s config is everything that is likely to vary between deploys (staging, production, developer environments, etc). … Apps sometimes store config as constants in the code. This is a violation of twelve-factor, which requires strict separation of config from code. Config varies substantially across deploys, code does not.</p><footer><strong>The Twelve-Factor App</strong> <cite><a href='http://www.12factor.net/config'>III. Config</a></cite></footer></blockquote>


<h3>Security risk</h3>

<p>More importantly though is the security implication. Knowing the secret token allows an attacker to trivially impersonate any user in the application.</p>

<p>The only system that <em>needs</em> to know the production secret token is the production infrastructure. In this case, the attack vector is limited to the production infrastructure, which is likely to be the most secure part of the infrastructure anyway.</p>

<p>By hardcoding the production secret token in the code base, the following attack vectors are opened:</p>

<ul>
<li>Every developer that has had access to the code base</li>
<li>Every development workstation that has a local copy of the code</li>
<li>The source control repository (whether private or 3rd-party e.g. Github)</li>
<li>The continuous integration server</li>
<li>Any 3rd-party services that have access to the source code, e.g. <a href="https://codeclimate.com/">Code Climate</a> or <a href="https://gemnasium.com/">Gemnasium</a></li>
<li>The people involved with all of the above services</li>
</ul>


<p>If an attacker wishes to obtain the application&rsquo;s secret token, there are vastly more opportunities when the secret token is stored in the code.</p>

<p>The prevalence of this bad practice can be seen by searching <a href="https://github.com/search?l=Ruby&amp;p=1&amp;q=application.config.secret_token+%3D+%27&amp;ref=searchbar&amp;type=Code">Github</a> or <a href="https://www.google.co.nz/search?q=secret_token.rb+-ENV+site%3Agithub.com">Google</a>. It&rsquo;s trivial to gain administrative access to many live applications simply by browsing those search results.</p>

<p><em>Update: <a href="http://twitter.com/brynary">Bryan Helmkamp</a> helpfully <a href="#comment-902646816">notes below</a> that with these tokens it&rsquo;s actually possible to execute arbitrary code on the web server.</em></p>

<h2>Loading Rails configuration from the environment</h2>

<p>In order to set the secret token securely, we want to load it from the application&rsquo;s environment. The simplest method is to replace the hardcoded token with a reference to Ruby&rsquo;s <code>ENV</code>:</p>

<figure class='code'><figcaption><span>/config/initializers/secret_token.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Be sure to restart your server when you modify this file.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Your secret key for verifying the integrity of signed cookies.</span>
</span><span class='line'><span class="c1"># If you change this key, all old signed cookies will become invalid!</span>
</span><span class='line'><span class="c1"># Make sure the secret is at least 30 characters and all random,</span>
</span><span class='line'><span class="c1"># no regular words or you&#39;ll be exposed to dictionary attacks.</span>
</span><span class='line'><span class="ss">MyApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">secret_token</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;SECRET_TOKEN&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>While this has the advantage of maintaining <a href="http://www.12factor.net/dev-prod-parity">development/production parity</a>, it can be inconvenient for simple apps. If <code>ENV['SECRET_TOKEN']</code> isn&rsquo;t set locally — for example in the development or testing workflow — ActionDispatch will raise an exception like:</p>

<pre><code>ArgumentError (A secret is required to generate an integrity hash for cookie session data. Use config.secret_token = "some secret phrase of at least 30 characters"in config/initializers/secret_token.rb):
</code></pre>

<p>One solution to this is managing a full set of environment variables within the development and test workflows. See below for more details on this.</p>

<p>Alternatively, a token could be hard-coded for the <code>development</code> and <code>test</code> environments, and loaded from the ENV in <code>production</code>.</p>

<figure class='code'><figcaption><span>/config/initializers/secret_token.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1"># Be sure to restart your server when you modify this file.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Your secret key for verifying the integrity of signed cookies.</span>
</span><span class='line'><span class="c1"># If you change this key, all old signed cookies will become invalid!</span>
</span><span class='line'><span class="c1"># Make sure the secret is at least 30 characters and all random,</span>
</span><span class='line'><span class="c1"># no regular words or you&#39;ll be exposed to dictionary attacks.</span>
</span><span class='line'><span class="ss">MyApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">secret_token</span> <span class="o">=</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span> <span class="ow">or</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">test?</span>
</span><span class='line'>  <span class="p">(</span><span class="s1">&#39;x&#39;</span> <span class="o">*</span> <span class="mi">30</span><span class="p">)</span> <span class="c1"># meets minimum requirement of 30 chars long</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;SECRET_TOKEN&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also removes any pretense that the hard-coded token is secure.</p>

<p>Occasionally, the following solution is used:</p>

<figure class='code'><figcaption><span>/config/initializers/secret_token.rb — Don&#8217;t do this! </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="ss">MyApp</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">secret_token</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;SECRET_TOKEN&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;3eb6db5a9026c547c72708438d496d942e976b252138db7e4e0ee5edd7539457d3ed0fa02ee5e7179420ce5290462018591adaf5f42adcf855da04877827def2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, if <code>ENV['SECRET_TOKEN']</code> isn&rsquo;t set in production, <strong>this will use the insecure token with no warning</strong>.</p>

<h2>Managing an Application&rsquo;s ENV</h2>

<p><a href="https://github.com/bkeepers/dotenv">Dotenv</a> is an excellent gem for managing an application&rsquo;s environment. Heroku&rsquo;s <a href="https://devcenter.heroku.com/articles/procfile#setting-local-environment-variables">foreman</a> uses this behind the scenes. Install it with:</p>

<figure class='code'><figcaption><span>Gemfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'dotenv-rails'</span></code></pre></td></tr></table></div></figure>


<p>By default, it loads environment variables from the <code>.env</code> file. Simply create this file in the <code>RAILS_ROOT</code> on the production web server.</p>

<figure class='code'><figcaption><span>.env </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># .env should NOT be checked in to source control
</span><span class='line'>SECRET_TOKEN=3eb6db5a9026c547c72708438d496d942e976b252138db7e4e0ee5edd7539457d3ed0fa02ee5e7179420ce5290462018591adaf5f42adcf855da04877827def2</span></code></pre></td></tr></table></div></figure>


<p>As the application configuration and infrastructure grows more complex, the gem also provides a consistent method to manage configuration across multiple developers, CI, staging and production servers. <a href="https://github.com/bkeepers">Brandon Keepers</a> wrote more on <a href="http://opensoul.org/blog/archives/2012/07/24/dotenv/">the rationale for the gem</a>.</p>

<h3>Heroku</h3>

<p>On Heroku, the application&rsquo;s environment variables are managed from the <code>heroku</code> CLI:</p>

<pre><code>$ heroku config:set SECRET_TOKEN=3eb6db5a9026c547c72708438d496d942e976b252138db7e4e0ee5edd7539457d3ed0fa02ee5e7179420ce5290462018591adaf5f42adcf855da04877827def2
</code></pre>

<p>(or you could use something like the <a href="http://daniel.fone.net.nz/blog/2013/05/19/managing-heroku-config-vars-from-the-web/">HerokuConfigVars engine</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Heroku Config Vars from the Web]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/19/managing-heroku-config-vars-from-the-web/"/>
    <updated>2013-05-19T20:50:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/19/managing-heroku-config-vars-from-the-web</id>
    <content type="html"><![CDATA[<p><strong>tl;dr</strong> The <a href="https://github.com/danielfone/heroku_config_vars">heroku_config_vars</a> Rails engine provides a secure web interface for managing an application&rsquo;s Heroku configuration.</p>

<h2>The Problem</h2>

<p><a href="http://heroku.com">Heroku</a> don&rsquo;t provide a way to manage an application&rsquo;s <a href="https://devcenter.heroku.com/articles/config-vars">configuration variables</a> through a web interface. Although an application&rsquo;s ENV shouldn&rsquo;t really be used for domain-specific configuration or settings that change frequently, sometimes it&rsquo;s a hassle to drop into a console when doing something as trivial as updating SMTP settings or cycling OAuth tokens.</p>

<p>What I really want to achieve is turning this:</p>

<pre><code>$ heroku config:set GITHUB_USERNAME=joesmith
Adding config vars and restarting myapp... done, v12
GITHUB_USERNAME: joesmith
</code></pre>

<p>into this:</p>

<p><img src="http://daniel.fone.net.nz/images/2013-05-19-managing-heroku-config-vars-from-the-web/heroku-config-update.png"></p>

<h2>The Solution</h2>

<p>The <a href="https://github.com/danielfone/heroku_config_vars">heroku_config_vars</a> Rails engine provides a web interface for managing an application&rsquo;s Heroku configuration. This makes it possible for administrators without CLI access to manage their Heroku configuration.</p>

<p><img src="http://daniel.fone.net.nz/images/2013-05-19-managing-heroku-config-vars-from-the-web/screenshot-1.png">
<img src="http://daniel.fone.net.nz/images/2013-05-19-managing-heroku-config-vars-from-the-web/screenshot-2.png">
<img src="http://daniel.fone.net.nz/images/2013-05-19-managing-heroku-config-vars-from-the-web/screenshot-3.png"></p>

<p>Installation and usage instructions can be found on <a href="https://github.com/danielfone/heroku_config_vars">github</a>. Feedback, questions, bugs, PRs are welcome!</p>

<p>Enjoy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desire Paths in Web UI]]></title>
    <link href="http://daniel.fone.net.nz/blog/2013/05/19/desire-paths-in-web-ui/"/>
    <updated>2013-05-19T16:50:00+12:00</updated>
    <id>http://daniel.fone.net.nz/blog/2013/05/19/desire-paths-in-web-ui</id>
    <content type="html"><![CDATA[<p>Slides and a rough transcription from my lightning talk
at the <a href="https://twitter.com/chchruby">@chchruby</a> meetup on Thursday, 16th May, 2013.</p>

<h2>Desire Paths in Web UIs</h2>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.001.jpg"></p>

<blockquote><p>Hi everyone, I&rsquo;m Daniel Fone
I&rsquo;m a freelance Rails engineer.
<a href="https://twitter.com/danielfone">@danielfone</a></p>

<p>Before I start, I want to frame this by saying,
this is more of a general &ldquo;philosophy of web application design&rdquo;
than a technical talk
so feel free to disagree — I don’t think there’s right and wrong —
but hopefully these musings are helpful to some of you</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.002.jpg"></p>

<blockquote><p>Ok, so “desire paths in web UI”</p>

<p>Who&rsquo;s heard of these before? Who knows what a desire path is?
Ok, who knows what a web UI is?</p>

<p>Good, we&rsquo;ve got something to start with :)</p>

<p>Desire paths are something that everyone’s familiar with, you probably just didn’t know they had a name:</p>

<p>Little story…
  I’ve got two little kids, and sometimes <a href="http://www.kungfugrippe.com/post/631603366/mommy-needs-a-minute">Mummy needs a minute</a>
  so daddy takes the kids for endless walks in the parks around where we live. There’s heaps.
And everywhere we go we see these things:</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.003.jpg">
<img src="http://daniel.fone.net.nz/images/desire-paths/slide.004.jpg">
<img src="http://daniel.fone.net.nz/images/desire-paths/slide.005.jpg">
<img src="http://daniel.fone.net.nz/images/desire-paths/slide.006.jpg"></p>

<blockquote><p>Those tracks you see between trees, between paved footpaths etc.
that’s a desire path</p>

<p>When someone designed the paths, they figured everyone wanted to walk “here”
turns out everyone wants to walk “over here”</p>

<p>Totally different story time:</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.007.jpg"></p>

<blockquote><p> ages ago I built a search feature for a client&rsquo;s in-house logistics system.
kinda omnisearch, searches all these different fields, fuzzy matches etc.
Some time later I was working with one of the users while they were using this system
and they were looking for a particular Order or Parcel or something
and instead of using my amazing search
they clicked on the “All Orders” tab, went ctrl-f and typed in the order number they were looking for.
So they just used the browser’s search function.</p>

<p>Turns out there was one field that was shown on the “All Orders” list that wasn’t shown on the search results page, so they were saving themselves an extra click by just going ctrl &ndash;> find on the orders list.</p>

<p>I designing the app, I never would&rsquo;ve thought about this particular edge case.</p>

<p>  And it got me thinking…
  These two stories are actually about the same thing!</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.008.jpg"></p>

<blockquote><p>Because really, a desire path is
the disconnect between a <strong>designer&rsquo;s intention</strong>
and a <strong>user&rsquo;s desires</strong></p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.009.jpg"></p>

<blockquote><p>Here’s the dilema for us as application developers</p>

<p>When I’m sitting down with a client and they want this new-fangled in house management tool.</p>

<ul>
<li>firstly, I don’t have any idea what their users (usually their staff) actually want</li>
<li>secondly, the technical managers I’m talking to usually only have a limited idea</li>
<li>finally, if you talk with the future users about how they do their job, and how they want this application to work… they have no idea either until they start using it!</li>
</ul>


<p>Basically, no-one knows exactly what they want until it’s in-front of them,
and then all they know they want something slightly different.</p>

<p>So what are we to do?</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.010.jpg"></p>

<blockquote><p>Here’s my pet theory…</p>

<p><strong>Build paths, not corridors.</strong></p>

<p>Going back to our outdoor examples,
paved footpaths leave users the opportunity to express desire paths
they can take shortcuts when they know where they’re going</p>

<p>Corridors don’t leave opportunities for desire paths. You go the way the architect intended you to.</p>

<p>I know what you’re thinking at this point…</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.011.jpg"></p>

<blockquote><p>Yeah. paths, corridors, muddy tracks in the ground. WAT.</p>

<p>So let’s put some legs on this.
Technically, what does this look like?</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.012.jpg"></p>

<blockquote><ol>
<li><p>Display more data, not less. Perhaps you have to hide it behind a “show more” link. But if you give it to the user, they can do something with it. This is the difference between omitting data and hiding it. I’ll come back to this in a sec.</p></li>
<li><p>Give the users all their data. export via CSV/XML whatever. In the business world, if they can get data out of your system and into excel, they can do anything with it. Like people can do ANYTHING with excel.</p></li>
<li><p>Expose APIs, same idea. Give them the data and let them find the ways they want to use it.</p></li>
</ol>


<p>There&rsquo;s a caveat though…</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.013.jpg"></p>

<blockquote><p>Letting users make desire paths doesn’t mean making none of your own paths in the UI.
You’ve still got to make decisions.</p>

<p>New users of your application need to see well marked paths so they learn how this information system works.
But as users become comfortable, they want the space to find their own shortcuts etc.
So it is good to <strong>hide</strong> all the unneeded data, but it’s not good to <strong>omit</strong> it entirely.</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.014.jpg"></p>

<blockquote><p>For bonus points…</p>

<p>If you’re doing SaaS or whatever, i.e. building value into your own product
You can leverage desire paths.</p>

<p>And if you can analyse your logs, or implement some JS tracking,
Or — heaven forbid — talk to your users!</p>

<p>You can discover the odd use cases you’d never thought of and then build those out.</p>

<p>So to recap:</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.015.jpg"></p>

<blockquote><ol>
<li>Let your users figure out how to do cool stuff with your app.</li>
<li>Figure out what cool stuff they’re doing</li>
<li>And then make it easier for everyone</li>
</ol>
</blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.016.jpg"></p>

<blockquote><p>But basically…</p>

<p><strong>Build paths, not corridors.</strong></p>

<p>Whatever that means for you.</p></blockquote>

<p><img src="http://daniel.fone.net.nz/images/desire-paths/slide.017.jpg"></p>

<blockquote><p>THANKS</p></blockquote>
]]></content>
  </entry>
  
</feed>
